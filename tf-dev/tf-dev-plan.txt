[0m[1mmodule.application.data.archive_file.lambda_archive_file_cloudnativeapp-tf: Reading...[0m[0m
[0m[1mmodule.application.data.archive_file.lambda_archive_file_cloudnativeapp-tf: Read complete after 0s [id=ba33f91a4d78027f0cb025dc8a4c9c5c2c54a401][0m
[0m[1mmodule.environment.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.environment.data.aws_iam_policy_document.s3_iam_pd_cloudnativeapp-tf: Reading...[0m[0m
[0m[1mmodule.environment.data.aws_iam_policy_document.s3_iam_pd_cloudnativeapp-tf: Read complete after 0s [id=1436911586][0m
[0m[1mmodule.environment.data.aws_region.current: Read complete after 0s [id=eu-west-1][0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_s3: Reading...[0m[0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_app_runner_service: Reading...[0m[0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_dynamodb: Reading...[0m[0m
[0m[1mmodule.environment.data.aws_vpc.default: Reading...[0m[0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_cloud_watch: Reading...[0m[0m
[0m[1mmodule.environment.data.aws_vpc.default: Read complete after 0s [id=vpc-0bc8d118b26e3aab1][0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_app_runner_service: Read complete after 3s [id=arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess][0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_cloud_watch: Read complete after 3s [id=arn:aws:iam::aws:policy/CloudWatchLogsFullAccess][0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_dynamodb: Read complete after 3s [id=arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess][0m
[0m[1mmodule.application.data.aws_iam_policy.ecs_s3: Read complete after 3s [id=arn:aws:iam::aws:policy/AmazonS3FullAccess][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.application.aws_cloudwatch_log_group.cloudwatch_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "cloudwatch_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "DevCloudnativeappTfCloudwatchLogGroup"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 0
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # module.application.aws_ecs_cluster.ecs_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "ecs_cluster" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "dev_ecs_cluster_cloudnativeapp-tf"
      [32m+[0m[0m tags_all = (known after apply)

      [32m+[0m[0m setting {
          [32m+[0m[0m name  = "containerInsights"
          [32m+[0m[0m value = "enabled"
        }
    }

[1m  # module.application.aws_ecs_service.ecs_service[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_service" "ecs_service" {
      [32m+[0m[0m cluster                            = (known after apply)
      [32m+[0m[0m deployment_maximum_percent         = 200
      [32m+[0m[0m deployment_minimum_healthy_percent = 100
      [32m+[0m[0m desired_count                      = 2
      [32m+[0m[0m enable_ecs_managed_tags            = false
      [32m+[0m[0m enable_execute_command             = false
      [32m+[0m[0m iam_role                           = (known after apply)
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m launch_type                        = "FARGATE"
      [32m+[0m[0m name                               = "DevCloudNativeApp1TFService"
      [32m+[0m[0m platform_version                   = (known after apply)
      [32m+[0m[0m scheduling_strategy                = "REPLICA"
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m task_definition                    = (known after apply)
      [32m+[0m[0m triggers                           = (known after apply)
      [32m+[0m[0m wait_for_steady_state              = false

      [32m+[0m[0m load_balancer {
          [32m+[0m[0m container_name   = "cloudnativeapp-1"
          [32m+[0m[0m container_port   = 8080
          [32m+[0m[0m target_group_arn = (known after apply)
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m network_configuration {
          [32m+[0m[0m assign_public_ip = false
          [32m+[0m[0m security_groups  = (known after apply)
          [32m+[0m[0m subnets          = [
              [32m+[0m[0m "subnet-01da444623a60d536",
              [32m+[0m[0m "subnet-0e2759092403c537c",
            ]
        }
    }

[1m  # module.application.aws_ecs_task_definition.ecs_task_definition[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "ecs_task_definition" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m arn_without_revision     = (known after apply)
      [32m+[0m[0m container_definitions    = jsonencode(
            [
              [32m+[0m[0m {
                  [32m+[0m[0m environment      = [
                      [32m+[0m[0m {
                          [32m+[0m[0m name  = "dynamodb_name"
                          [32m+[0m[0m value = "DevCloudNativeApp1Table-tf"
                        },
                    ]
                  [32m+[0m[0m essential        = true
                  [32m+[0m[0m image            = "381492307166.dkr.ecr.eu-west-1.amazonaws.com/cloudnativeapp-1:latest"
                  [32m+[0m[0m logConfiguration = {
                      [32m+[0m[0m logDriver     = "awslogs"
                      [32m+[0m[0m options       = {
                          [32m+[0m[0m awslogs-create-group  = "true"
                          [32m+[0m[0m awslogs-group         = "/ecs/DevCloudnativeappTfCloudwatchLogGroup"
                          [32m+[0m[0m awslogs-region        = "eu-west-1"
                          [32m+[0m[0m awslogs-stream-prefix = "ecs"
                        }
                      [32m+[0m[0m secretOptions = []
                    }
                  [32m+[0m[0m name             = "cloudnativeapp-1"
                  [32m+[0m[0m portMappings     = [
                      [32m+[0m[0m {
                          [32m+[0m[0m appProtocol   = "http"
                          [32m+[0m[0m containerPort = 8080
                          [32m+[0m[0m hostPort      = 8080
                          [32m+[0m[0m name          = "cloudnativeapp-1-tf-8080-tcp"
                          [32m+[0m[0m protocol      = "tcp"
                        },
                    ]
                },
            ]
        )
      [32m+[0m[0m cpu                      = "1024"
      [32m+[0m[0m execution_role_arn       = (known after apply)
      [32m+[0m[0m family                   = "Dev_CloudNativeApp1_TF_Task_Definition_Family"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "3072"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m skip_destroy             = false
      [32m+[0m[0m tags_all                 = (known after apply)
      [32m+[0m[0m task_role_arn            = (known after apply)
      [32m+[0m[0m track_latest             = false
    }

[1m  # module.application.aws_iam_policy.lambda_iam_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_iam_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "A policy for lambda"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "dev_lambda_iam_policy_cloudnativeapp-tf"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rekognition:DetectLabels",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.application.aws_iam_policy_attachment.ecs_te_apprunnerservice_iam_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "ecs_te_apprunnerservice_iam_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "dev_ecs_te_apprunnerservice_iam_policy_attachment_cloudnativeapp-tf"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "dev_ecs_task_execution_role_cloudnativeapp-tf",
        ]
    }

[1m  # module.application.aws_iam_policy_attachment.ecs_te_cloudwatch_iam_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "ecs_te_cloudwatch_iam_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "dev_ecs_te_cloudwatch_iam_policy_attachment_cloudnativeapp-tf"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "dev_ecs_task_execution_role_cloudnativeapp-tf",
        ]
    }

[1m  # module.application.aws_iam_policy_attachment.ecs_tt_dynamodb_iam_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "ecs_tt_dynamodb_iam_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "dev_ecs_tt_amazondynamodb_iam_policy_attachment_cloudnativeapp-tf"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "dev_ecs_task_task_role_cloudnativeapp-tf",
        ]
    }

[1m  # module.application.aws_iam_policy_attachment.ecs_tt_s3_iam_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "ecs_tt_s3_iam_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "dev_ecs_tt_amazons3_iam_policy_attachment_cloudnativeapp-tf"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "dev_ecs_task_task_role_cloudnativeapp-tf",
        ]
    }

[1m  # module.application.aws_iam_policy_attachment.lambda_iam_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "lambda_iam_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "dev_lambda_iam_policy_attachment_cloudnativeapp-tf"
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "dev_lambda_iam_role_cloudnativeapp-tf",
        ]
    }

[1m  # module.application.aws_iam_role.ecs_task_execution_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task_execution_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev_ecs_task_execution_role_cloudnativeapp-tf"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.application.aws_iam_role.ecs_task_task_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task_task_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev_ecs_task_task_role_cloudnativeapp-tf"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.application.aws_iam_role.lambda_iam_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_iam_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev_lambda_iam_role_cloudnativeapp-tf"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.application.aws_lambda_function.lambda_function[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "lambda_function" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m filename                       = "../modules/tf-application/lambda_function_payload.zip"
      [32m+[0m[0m function_name                  = "dev_lambda_cloudnativeapp-tf"
      [32m+[0m[0m handler                        = "index.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.12"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "U5G1VRDH4ze1gtOD8ZL+qHzJTfrnImO0SqZ/mqpHSZk="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 3
      [32m+[0m[0m version                        = (known after apply)
    }

[1m  # module.application.aws_lb.load_balancer[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "load_balancer" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = true
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "DevCloudnativeappTfLb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = [
          [32m+[0m[0m "subnet-01da444623a60d536",
          [32m+[0m[0m "subnet-0e2759092403c537c",
        ]
      [32m+[0m[0m tags_all                                                     = (known after apply)
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # module.application.aws_lb_listener.lb_listener[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "lb_listener" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # module.application.aws_lb_target_group.lb_target_group[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "lb_target_group" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "DevCloudnativeappTfLbTg"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = "vpc-0bc8d118b26e3aab1"

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 3
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = (known after apply)
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = (known after apply)
          [32m+[0m[0m unhealthy_threshold = 3
        }
    }

[1m  # module.application.aws_security_group.ecs_service_security_group[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecs_service_security_group" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow all inbound traffic and all outbound traffic"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "ecs_service_security_group_cloudnativeapp1-tf"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "allow_all"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "allow_all"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.application.aws_vpc_security_group_egress_rule.allow_all_traffic_ipv4[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cidr_ipv4              = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_protocol            = "-1"
      [32m+[0m[0m security_group_id      = (known after apply)
      [32m+[0m[0m security_group_rule_id = (known after apply)
      [32m+[0m[0m tags_all               = {}
    }

[1m  # module.application.aws_vpc_security_group_egress_rule.allow_all_traffic_ipv6[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv6" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cidr_ipv6              = "::/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_protocol            = "-1"
      [32m+[0m[0m security_group_id      = (known after apply)
      [32m+[0m[0m security_group_rule_id = (known after apply)
      [32m+[0m[0m tags_all               = {}
    }

[1m  # module.application.aws_vpc_security_group_ingress_rule.allow_all_traffic_ipv4[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_ingress_rule" "allow_all_traffic_ipv4" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cidr_ipv4              = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_protocol            = "-1"
      [32m+[0m[0m security_group_id      = (known after apply)
      [32m+[0m[0m security_group_rule_id = (known after apply)
      [32m+[0m[0m tags_all               = {}
    }

[1m  # module.application.aws_vpc_security_group_ingress_rule.allow_all_traffic_ipv6[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_security_group_ingress_rule" "allow_all_traffic_ipv6" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cidr_ipv6              = "::/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ip_protocol            = "-1"
      [32m+[0m[0m security_group_id      = (known after apply)
      [32m+[0m[0m security_group_rule_id = (known after apply)
      [32m+[0m[0m tags_all               = {}
    }

[1m  # module.environment.data.aws_iam_policy_document.sns_iam_pd_cloudnativeapp-tf[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "sns_iam_pd_cloudnativeapp-tf" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sns:Publish",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:sns:*:*:dev-image-notification-cloudnativeapp1glom-tf",
            ]
          [32m+[0m[0m sid       = "AllowPublishNewMessages"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ArnLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m variable = "aws:SourceArn"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "s3.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
    }

[1m  # module.environment.data.aws_iam_policy_document.sqs_iam_pd_cloudnativeapp-tf[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "sqs_iam_pd_cloudnativeapp-tf" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:SendMessage",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:sqs:*:*:dev-queue-cloudnativeapp1glom-tf",
            ]
          [32m+[0m[0m sid       = "AllowSendMessages"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ArnEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m variable = "aws:SourceArn"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "sns.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
    }

[1m  # module.environment.data.aws_subnet.default_subnets_cidr_blocks["172.31.0.0/20"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_subnet" "default_subnets_cidr_blocks" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = (known after apply)
      [32m+[0m[0m availability_zone                              = (known after apply)
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m available_ip_address_count                     = (known after apply)
      [32m+[0m[0m cidr_block                                     = "172.31.0.0/20"
      [32m+[0m[0m customer_owned_ipv4_pool                       = (known after apply)
      [32m+[0m[0m default_for_az                                 = (known after apply)
      [32m+[0m[0m enable_dns64                                   = (known after apply)
      [32m+[0m[0m enable_lni_at_device_index                     = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = (known after apply)
      [32m+[0m[0m map_customer_owned_ip_on_launch                = (known after apply)
      [32m+[0m[0m map_public_ip_on_launch                        = (known after apply)
      [32m+[0m[0m outpost_arn                                    = (known after apply)
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m state                                          = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.environment.data.aws_subnet.default_subnets_cidr_blocks["172.31.16.0/20"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_subnet" "default_subnets_cidr_blocks" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = (known after apply)
      [32m+[0m[0m availability_zone                              = (known after apply)
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m available_ip_address_count                     = (known after apply)
      [32m+[0m[0m cidr_block                                     = "172.31.16.0/20"
      [32m+[0m[0m customer_owned_ipv4_pool                       = (known after apply)
      [32m+[0m[0m default_for_az                                 = (known after apply)
      [32m+[0m[0m enable_dns64                                   = (known after apply)
      [32m+[0m[0m enable_lni_at_device_index                     = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = (known after apply)
      [32m+[0m[0m map_customer_owned_ip_on_launch                = (known after apply)
      [32m+[0m[0m map_public_ip_on_launch                        = (known after apply)
      [32m+[0m[0m outpost_arn                                    = (known after apply)
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m state                                          = (known after apply)
      [32m+[0m[0m tags                                           = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.environment.aws_default_subnet.default_subnet_a[0m will be created
[0m  [32m+[0m[0m resource "aws_default_subnet" "default_subnet_a" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = (known after apply)
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_lni_at_device_index                     = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m existing_default_subnet                        = (known after apply)
      [32m+[0m[0m force_destroy                                  = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m outpost_arn                                    = (known after apply)
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.environment.aws_default_subnet.default_subnet_b[0m will be created
[0m  [32m+[0m[0m resource "aws_default_subnet" "default_subnet_b" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = (known after apply)
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_lni_at_device_index                     = (known after apply)
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m existing_default_subnet                        = (known after apply)
      [32m+[0m[0m force_destroy                                  = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m outpost_arn                                    = (known after apply)
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.environment.aws_dynamodb_table.dynamodb_table_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "dynamodb_table_cloudnativeapp-tf" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PROVISIONED"
      [32m+[0m[0m hash_key         = "ImageName"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "DevCloudNativeApp1Table-tf"
      [32m+[0m[0m range_key        = "LabelValue"
      [32m+[0m[0m read_capacity    = 10
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m write_capacity   = 10

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "ImageName"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "LabelValue"
          [32m+[0m[0m type = "S"
        }
    }

[1m  # module.environment.aws_s3_bucket.s3_bucket_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "s3_bucket_cloudnativeapp-tf" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "dev-bucket-cloudnativeapp1glom-tf"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.environment.aws_s3_bucket_acl.s3_bucket_acl_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "s3_bucket_acl_cloudnativeapp-tf" {
      [32m+[0m[0m acl    = "public-read"
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
    }

[1m  # module.environment.aws_s3_bucket_notification.s3_bucket_notification_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "s3_bucket_notification_cloudnativeapp-tf" {
      [32m+[0m[0m bucket      = (known after apply)
      [32m+[0m[0m eventbridge = false
      [32m+[0m[0m id          = (known after apply)

      [32m+[0m[0m topic {
          [32m+[0m[0m events    = [
              [32m+[0m[0m "s3:ObjectCreated:*",
            ]
          [32m+[0m[0m id        = (known after apply)
          [32m+[0m[0m topic_arn = (known after apply)
        }
    }

[1m  # module.environment.aws_s3_bucket_ownership_controls.s3_bucket_oc_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_ownership_controls" "s3_bucket_oc_cloudnativeapp-tf" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m object_ownership = "BucketOwnerPreferred"
        }
    }

[1m  # module.environment.aws_s3_bucket_policy.s3_bucket_policy_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "s3_bucket_policy_cloudnativeapp-tf" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "s3:PutObjectAcl",
                          [32m+[0m[0m "s3:PutObject",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:s3:::dev-bucket-cloudnativeapp1glom-tf/*",
                          [32m+[0m[0m "arn:aws:s3:::dev-bucket-cloudnativeapp1glom-tf",
                        ]
                      [32m+[0m[0m Sid       = "AllowECSPermissions"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "s3:GetObject",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:s3:::dev-bucket-cloudnativeapp1glom-tf/*",
                          [32m+[0m[0m "arn:aws:s3:::dev-bucket-cloudnativeapp1glom-tf",
                        ]
                      [32m+[0m[0m Sid       = "AllowLambdaPermissions"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
    }

[1m  # module.environment.aws_s3_bucket_public_access_block.s3_bucket_pab_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "s3_bucket_pab_cloudnativeapp-tf" {
      [32m+[0m[0m block_public_acls       = false
      [32m+[0m[0m block_public_policy     = false
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = false
      [32m+[0m[0m restrict_public_buckets = false
    }

[1m  # module.environment.aws_security_group.ecr_api_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecr_api_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "ECR API Security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "172.31.0.0/20",
                  [32m+[0m[0m "172.31.16.0/20",
                ]
              [32m+[0m[0m description      = "allow all ingress traffic from subnets"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 65535
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_security_group.ecr_dkr_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecr_dkr_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "ECR DKR Security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "172.31.0.0/20",
                  [32m+[0m[0m "172.31.16.0/20",
                ]
              [32m+[0m[0m description      = "allow all ingress traffic from subnets"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 65535
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_security_group.logs_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "logs_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Logs Security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "172.31.0.0/20",
                  [32m+[0m[0m "172.31.16.0/20",
                ]
              [32m+[0m[0m description      = "allow all ingress traffic from subnets"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 65535
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_sns_topic.sns_image_notification-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "sns_image_notification-tf" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "dev-image-notification-cloudnativeapp1glom-tf"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.environment.aws_sns_topic_subscription.sns_image_notification_topic_subscription-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic_subscription" "sns_image_notification_topic_subscription-tf" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m confirmation_timeout_in_minutes = 1
      [32m+[0m[0m confirmation_was_authenticated  = (known after apply)
      [32m+[0m[0m endpoint                        = (known after apply)
      [32m+[0m[0m endpoint_auto_confirms          = false
      [32m+[0m[0m filter_policy_scope             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m pending_confirmation            = (known after apply)
      [32m+[0m[0m protocol                        = "sqs"
      [32m+[0m[0m raw_message_delivery            = false
      [32m+[0m[0m topic_arn                       = (known after apply)
    }

[1m  # module.environment.aws_sqs_queue.sqs_queue_cloudnativeapp-tf[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "sqs_queue_cloudnativeapp-tf" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = (known after apply)
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 345600
      [32m+[0m[0m name                              = "dev-queue-cloudnativeapp1glom-tf"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 0
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m sqs_managed_sse_enabled           = (known after apply)
      [32m+[0m[0m tags_all                          = (known after apply)
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 30
    }

[1m  # module.environment.aws_sqs_queue_policy.sqs_queue_cloudnativeapp_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue_policy" "sqs_queue_cloudnativeapp_policy" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m policy    = (known after apply)
      [32m+[0m[0m queue_url = (known after apply)
    }

[1m  # module.environment.aws_vpc_endpoint.dynamodb_endpoint[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "dynamodb_endpoint" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = false
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.dynamodb"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Gateway"
      [32m+[0m[0m vpc_id                = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_vpc_endpoint.ecr_api_endpoint[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ecr_api_endpoint" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.ecr.api"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-01da444623a60d536",
          [32m+[0m[0m "subnet-0e2759092403c537c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_vpc_endpoint.ecr_dkr_endpoint[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ecr_dkr_endpoint" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.ecr.dkr"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-01da444623a60d536",
          [32m+[0m[0m "subnet-0e2759092403c537c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_vpc_endpoint.logs_endpoint[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "logs_endpoint" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.logs"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = [
          [32m+[0m[0m "subnet-01da444623a60d536",
          [32m+[0m[0m "subnet-0e2759092403c537c",
        ]
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = "vpc-0bc8d118b26e3aab1"
    }

[1m  # module.environment.aws_vpc_endpoint.s3_endpoint[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "s3_endpoint" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = false
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-1.s3"
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m vpc_endpoint_type     = "Gateway"
      [32m+[0m[0m vpc_id                = "vpc-0bc8d118b26e3aab1"
    }

[1mPlan:[0m 43 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
